// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id            String           @id @default(cuid())
    name          String
    email         String           @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    tasks         TaskAssignment[]
    tasksCreated  Task[]
}

model Task {
    id          String           @id @default(cuid())
    title       String
    description String?
    deadline    DateTime?
    progress    Int              @default(0)
    priority    Priority         @default(MEDIUM)
    tags        Tag[] // Implicit many-to-many relation
    assignees   TaskAssignment[]
    createdBy   User             @relation(fields: [createdById], references: [id])
    createdById String
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
}

model TaskAssignment {
    id         String   @id @default(cuid())
    task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    assignedAt DateTime @default(now())

    @@unique([taskId, userId])
}

model Tag {
    id    String @id @default(cuid())
    name  String @unique
    tasks Task[]
}

enum Priority {
    LOW
    MEDIUM
    HIGH
    CRITICAL
}

// Necessary for NextAuth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
